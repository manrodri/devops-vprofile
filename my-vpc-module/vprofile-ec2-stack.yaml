---

- name: setup vprofile stack
  hosts: localhost
  connection: local
  gather_facts: False
  module_defaults:
      group/aws:
        aws_profile: jenkins
  tasks:

    - name: Import EC2 setup
      include_vars: vars/vprofile-stack-setup

    - name: Import VPC setup variables
      include_vars: vars/output_vars

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprofile-dev-key
        region: "{{region}}"
      register: key_out
    - name: Save private key into file bastion-key.pem
      copy:
        content: "{{key_out.key.private_key}}"
        dest: "provision-stack/group_vars/vprofile-dev-key.pem"
        mode: 0400
      when: key_out.changed

    - name:  load balancer sg
      ec2_group:
        name: lb_sg
        description: lb_sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ my_ip}}"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{ my_ip}}"
      register: lb_sg_out

    - name:  vprofile_app_sg
      ec2_group:
        name: vprofile_app_sg
        description: vprofile_app_sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{lb_sg_out.group_id}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastion_sg.group_id}}"

      register: vprofile_app_sg_out

    - name:  vprofile_backend_sg
      ec2_group:
        name: vprofile_backend_sg
        description: vprofile_backend_sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vprofile_app_sg_out.group_id}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastion_sg.group_id}}"

      register: vprofile_backend_sg_out
    - name: all traffic allow internally in backend group
      ec2_group:
        name: vprofile_backend_sg
        description: vprofile_backend_sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vprofile_backend_sg_out.group_id}}"


    - name: Creating Nginx web01
      ec2:
        key_name: vprofile-dev-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ubuntu_18_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        group_id: "{{vprofile_app_sg_out.group_id}}"
        vpc_subnet_id: "{{public_subnet_1_id}}"
      register: web01_out


    - name: Creating memcache
      ec2:
        key_name: vprofile-dev-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ubuntu_18_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "memcache"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "memcache"
          Project: Vprofile
          Owner: DevOps Team
        group_id: "{{vprofile_backend_sg_out.group_id}}"
        vpc_subnet_id: "{{public_subnet_1_id}}"
      register: memcache_out

    - name: Creating rabbitmq
      ec2:
        key_name: vprofile-dev-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ubuntu_18_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rabbitmq"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "rabbitmq"
          Project: Vprofile
          Owner: DevOps Team
        group_id: "{{vprofile_backend_sg_out.group_id}}"
        vpc_subnet_id: "{{public_subnet_1_id}}"
      register: rabbitmq_out


    - name: Creating mysql
      ec2:
        key_name: vprofile-dev-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ubuntu_18_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mysql"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "mysql"
          Project: Vprofile
          Owner: DevOps Team
        group_id: "{{vprofile_backend_sg_out.group_id}}"
        vpc_subnet_id: "{{public_subnet_1_id}}"
      register: mysql_out



    - name: Creating tomcat
      ec2:
        key_name: vprofile-dev-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{ubuntu_18_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "tomcat"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "tomcat"
          Project: Vprofile
          Owner: DevOps Team
        group_id: "{{vprofile_backend_sg_out.group_id}}"
        vpc_subnet_id: "{{public_subnet_1_id}}"
      register: tomcat_out



    - name: update vars/output_vars
      blockinfile:
        path: vars/output_vars
        backup: yes
        block: |
          bastion_sg_id: "{{bastion_sg.group_id}}"
          lb_sg_id:  "{{lb_sg_out.group_id}}"
          backend_sg_id: "{{vprofile_backend_sg_out.group_id}}"
          vprofile_app_sg_out: "{{vprofile_app_sg_out}}"

    - debug:
        var: mysql_out.tagged_instances[0].id





    - name: Insert/Update Hosts IP & Name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.tagged_instances[0].private_ip }}
          app01_ip: {{ tomcat_out.tagged_instances[0].private_ip }}
          rmq01_ip: {{ rabbitmq_out.tagged_instances[0].private_ip }}
          mc01_ip: {{ memcache_out.tagged_instances[0].private_ip }}
          db01_ip: {{ mysql_out.tagged_instances[0].private_ip }}

    - name: Insert/Update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
          app01 ansible_host={{ tomcat_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ rabbitmq_out.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ memcache_out.tagged_instances[0].private_ip }}
          db01 ansible_host={{ mysql_out.tagged_instances[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=vprofile-dev-key.pem
          #ansible_python_interpreter=/usr/bin/python3


#    - name: "vprofile-elb"
#      ec2_elb_lb:
#        name: "vprofile-elb"
#        region: "{{region}}"
#        state: present
#        instance_ids:
#          - "{{ web01_out.tagged_instances[0].id }}"
#        purge_instance_ids: true
#        security_group_ids: "{{ lb_sg_out.group_id }}"
#        subnets:
#          - "{{ public_subnet_1_id }}"
#          - "{{ public_subnet_2_id }}"
#          - "{{ public_subnet_3_id }}"
#        listeners:
#          - protocol: http # options are http, https, ssl, tcp
#            load_balancer_port: 80
#            instance_port: 80